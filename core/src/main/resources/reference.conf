akka {
  # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs to STDOUT)
  loggers = ["akka.event.slf4j.Slf4jLogger"]

  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = INFO

  log-config-on-start = off

  # Log level for the very basic logger activated during ActorSystem startup.
  # This logger prints the log messages to stdout (System.out).
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  stdout-loglevel = "INFO"

  # Filter of log events that is used by the LoggingAdapter before publishing log events to the eventStream.
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"

    debug {
      # enable function of LoggingReceive, which is to log any received message at DEBUG level
      receive = on
      # enable DEBUG logging of all AutoReceiveMessages (Kill, PoisonPill et.c.)
      autoreceive = on
      # enable DEBUG logging of actor lifecycle changes
      lifecycle = on

      # stdout-loglevel = "OFF"
      loglevel = "OFF"
    }

//    serializers {
//    }
//
//    serialization-bindings {
//    }

    enable-additional-serialization-bindings = on
    allow-java-serialization = on
    warn-about-java-serializer-usage = on
  }

  cluster {
    seed-nodes = ["akka.tcp://es-core@127.0.0.1:2551"]
  }

  remote {
    log-remote-lifecycle-events = on //off
    netty.tcp {
      # external (logical) hostname
      hostname = 127.0.0.1
      hostname = ${?AKKA_HOST_NAME}
      # external (logical) port
      port = 2551
      port = ${?AKKA_PORT}

      # internal (bind) hostname
      bind-hostname = "0.0.0.0"
      bind-hostname = ${?AKKA_BIND_HOST_NAME}
      # internal (bind) port
      bind-port = 2551
      bind-port = ${?AKKA_BIND_PORT}
    }
  }

  persistence {
    journal.plugin = "cassandra-journal"
    snapshot-store.plugin = "cassandra-snapshot-store"
  }
}